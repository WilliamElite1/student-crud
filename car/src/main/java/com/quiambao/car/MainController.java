package com.quiambao.car;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.*;


@Controller // This means that this class is a Controller
@RequestMapping(path="/cars") // This means URL's start with /cars (after Application path)
public class MainController {
    @Autowired // This means to get the bean called carRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CarRepository carRepository;


    @PostMapping // Map ONLY POST Requests
    public @ResponseBody String addNewCar (
            @RequestParam String make,
            @RequestParam String model,
            @RequestParam String body,
            @RequestParam String transmission ) {

        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        Car c = new Car();

        c.setMake(make);
        c.setModel(model);
        c.setBody(body);
        c.setTransmission(transmission);

        String response;
        try {
            Car savedCar = carRepository.save(c);
            response = "Success adding car with id: " + savedCar.getId();
        } catch (Exception e) {
            response =  "Error " + e.getMessage();
        }
        return response;
    }


    @GetMapping
    public @ResponseBody Iterable<Car> getAllCars() {
        // This returns a JSON or XML with the cars
        return carRepository.findAll();
    }
    @GetMapping(path="/{id}") // Map ONLY GET Requests
    public @ResponseBody Optional<Car> getCar (@PathVariable Integer id) {
        return carRepository.findById(id);
    }
    @DeleteMapping(path="/{id}") // Map ONLY DELETE Requests
    public @ResponseBody String delete (@PathVariable Integer id) {

        String response;
        try {
            carRepository.deleteById(id);
            response = "Deleted";
        } catch (Exception e) {
            response = "Error " + e.getMessage();
        }
        return response;
    }

    @PutMapping("/{id}")
    public ResponseEntity<Car> updateCar(@PathVariable Long id, @RequestBody Car car) {
        return carRepository.findById(Math.toIntExact(id))
                .map(existingCar -> {
                    existingCar.setMake(car.getMake());
                    existingCar.setModel(car.getModel());
                    existingCar.setBody(car.getBody());
                    existingCar.setTransmission(car.getTransmission());
                    // Set other properties as needed
                    Car updatedCar = carRepository.save(existingCar);
                    return ResponseEntity.ok(updatedCar);
                })
                .orElse(ResponseEntity.notFound().build());
    }
}
